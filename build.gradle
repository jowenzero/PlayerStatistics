plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '2.0.0-Beta4'
    id 'me.modmuss50.mod-publish-plugin' version '0.5.1'
}

loom {
    accessWidenerPath = getRootProject().file("src/main/resources/playerstatistics.accesswidener")
    serverOnlyMinecraftJar()

    // runConfigs.configureEach {
    //     ideConfigGenerated true // Run configurations are not created for subprojects by default
    //     runDir "../../run" // Use a shared run folder and just create separate worlds
    // }
}

def modName = property('mod.name').toString()
group = property('mod.group').toString()
archivesBaseName = property('mod.id').toString()

def modVersion = property('mod.version').toString()
def mcVersion = property('deps.minecraft.min')
version = "$modVersion+$mcVersion"

repositories {
    mavenCentral()
    maven {
        url "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://maven.nucleoid.xyz' }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:$mcVersion"
    mappings "net.fabricmc:yarn:$mcVersion+build.${property('deps.yarn_build')}:v2"
    modImplementation "net.fabricmc:fabric-loader:${property('deps.fabric_loader')}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric_api')}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${property('deps.fabric_kotlin')}"

    // Silk API
    include modImplementation("net.silkmc:silk-core:${property('deps.silk')}")
    include modImplementation("net.silkmc:silk-commands:${property('deps.silk')}")

    // Database
    modImplementation "maven.modrinth:sqlite-jdbc:${property('deps.sqlite_jdbc')}"

    // Translations
    include modImplementation("xyz.nucleoid:server-translations-api:${property('deps.server_translations')}")
}

def targetMCVersions() {
    def min = property('deps.minecraft.min')
    def max = property('deps.minecraft.max')
    min == max ? min : ">=$min- <=$max"
}

def expandProperties = [
    "version": project.version,
    "name": modName,
    "minecraft_version": targetMCVersions(),
    "loader_version": property('deps.fabric_loader'),
    "fabric_kotlin_version": property('deps.fabric_kotlin'),
    "sqlite_jdbc_version": property('deps.sqlite_jdbc'),
]

processResources {
    inputs.properties expandProperties
    filteringCharset "UTF-8"
    filesMatching("fabric.mod.json") { expand expandProperties }
}

// Collect builds into one directory per mod version
tasks.register("collectJars", Copy) {
    group = 'build'
    from remapJar.archiveFile
    // from remapSourcesJar.archiveFile
    into rootProject.layout.buildDirectory.dir("libs/$modVersion")
}

build {
    finalizedBy 'collectJars'
}

// Env configuration
stonecutter {
    def java21 = mcVersion >= "1.20.5"
    java {
        withSourcesJar()
        sourceCompatibility = targetCompatibility = java21 ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
    }
    kotlin {
        jvmToolchain java21 ? 21 : 17
    }
}

jar {
    from('LICENSE') {
        rename { "${it}_$archivesBaseName" }
    }
}

publishMods {
    def releaseType = providers.environmentVariable 'RELEASE_TYPE'
    type = me.modmuss50.mpp.ReleaseType.of(releaseType.getOrElse('stable'))

    modLoaders.add 'fabric'
    displayName = "$modName $modVersion"
    changelog = rootProject.file('CHANGELOG.md').text

    file = remapJar.archiveFile
    additionalFiles.from remapSourcesJar.archiveFile

    modrinth {
        projectId = 'PztDP6Mf'
        accessToken = providers.environmentVariable 'MODRINTH_TOKEN'
        dryRun = accessToken.getOrNull() == null

        def min = property('deps.minecraft.min').toString()
        def max = property('deps.minecraft.max').toString()

        if (min == max) minecraftVersions.add(min)
        else minecraftVersionRange { start = min; end = max }

        requires 'fabric-api', 'fabric-language-kotlin', 'sqlite-jdbc'
    }
}
